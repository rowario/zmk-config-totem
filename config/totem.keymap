//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <9 8>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <19 18>;
        };

        FIRST_LAYER {
            bindings = <&mo 1>;
            key-positions = <37 34>;
        };

        SECOND_LAYER {
            bindings = <&mo 2>;
            key-positions = <37 33>;
        };

        THIRD_LAYER {
            bindings = <&mo 3>;
            key-positions = <37 32>;
        };

        FOURT_LAYER {
            bindings = <&mo 4>;
            key-positions = <33 36>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        QWERTY {
            bindings = <
                &kp Q  &kp W  &kp E     &kp R      &kp T               &kp Y     &kp U    &kp I          &kp O    &kp P
                &kp A  &kp S  &kp D     &kp F      &kp G               &kp H     &kp J    &kp K          &kp L    &kp SEMI
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C     &kp V      &kp B               &kp N     &kp M    &kp COMMA      &kp DOT  &kp FSLH  &kp SQT
                              &kp LGUI  &kp SPACE  &kp LEFT_CONTROL    &kp BSPC  &kp RET  &kp RIGHT_ALT
            >;
        };

        NUMBERS {
            bindings = <
           &kp F1                   &kp F2  &kp F3    &kp F4    &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
           &mt LEFT_SHIFT NUMBER_1  &kp N2  &kp N3    &kp N4    &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &mt RIGHT_SHIFT NUMBER_0
&kp LSHFT  &trans                   &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans                    &kp RSHFT
                                            &kp LALT  &kp LGUI  &trans    &trans  &trans  &trans
            >;
        };

        SYBMOLS {
            bindings = <
             &kp LS(UNDER)  &kp LS(PIPE)   &kp MINUS     &kp LS(LT)     &kp EQUAL        &kp LS(EXCL)  &kp LS(GT)    &kp LS(PLUS)   &kp FSLH     &kp LS(AMPS)
             &kp LS(CARET)  &kp LS(TILDE)  &kp LS(LPAR)  &kp LS(LBRC)   &kp LBKT         &kp RBKT      &kp LS(RBRC)  &kp LS(RPAR)   &kp LS(DQT)  &kp LS(STAR)
&kp LA(TAB)  &kp Z          &kp LS(PIPE)   &kp LS(AT)    &kp LS(POUND)  &kp LS(COLON)    &kp SEMI      &kp LS(DLLR)  &kp LS(PRCNT)  &kp DOT      &kp FSLH      &kp SQT
                                           &trans        &trans         &trans           &trans        &trans        &trans
            >;
        };

        SETTINGS {
            bindings = <
        &trans  &trans  &trans  &sys_reset  &bt BT_CLR    &kp C_VOL_UP  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans      &trans        &kp C_VOL_DN  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans      &trans        &kp C_MUTE    &trans  &trans  &trans  &trans  &kp LEFT_BRACKET
                        &trans  &trans      &trans        &trans        &trans  &trans
            >;
        };

        ARROWS {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans          &trans          &trans        &trans           &trans
        &trans  &trans  &trans  &trans  &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans          &trans        &trans           &trans  &trans
                        &trans  &trans  &trans    &trans          &trans          &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
